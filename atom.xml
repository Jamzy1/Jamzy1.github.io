<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿正</title>
  
  <subtitle>生而为人，不必抱歉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Jamzy1.github.io/"/>
  <updated>2020-02-17T15:43:18.873Z</updated>
  <id>http://Jamzy1.github.io/</id>
  
  <author>
    <name>史佳正</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性表</title>
    <link href="http://Jamzy1.github.io/2020/02/16/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://Jamzy1.github.io/2020/02/16/线性表/</id>
    <published>2020-02-16T15:00:03.948Z</published>
    <updated>2020-02-17T15:43:18.873Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="线性表接口"><a href="#线性表接口" class="headerlink" title="线性表接口"></a>线性表接口</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i,T x)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,T x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T x)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(T key)</span></span>;              <span class="comment">//查找首次出现的与key相等元素，返回元素序号i</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertDifferent</span><span class="params">(T x)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(T key)</span></span>;                <span class="comment">//删除首次出现的与key相等元素，返回被删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;T&gt; list)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性表的顺序存储和实现"><a href="#线性表的顺序存储和实现" class="headerlink" title="线性表的顺序存储和实现"></a>线性表的顺序存储和实现</h2><p><strong>顺序表</strong>是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。<strong>线性表采用顺序存储的方式存储就称之为顺序表。</strong>顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。<br>从顺序表的定义上可以看出，顺序表就是数组。二者只是不同领域中的称呼。顺序表是数据结构中的专有名词，而数组是在C语言或者其它编程语言中的一种数据类型。可以说，数组是顺序表在实际编程中的具体实现方式。</p><ol><li>创建顺序表类，并实现线性表List几个简单的方法<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqList</span>&lt;<span class="type">T</span>&gt; <span class="title">implements</span> <span class="title">List</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Object[] element;</span><br><span class="line">    <span class="keyword">protected</span> int n;</span><br><span class="line">    <span class="keyword">public</span> SeqList(int length)&#123;                     <span class="comment">//第一个构造方法,定义容量为length</span></span><br><span class="line">        <span class="keyword">this</span>.element=new Object[length];</span><br><span class="line">        <span class="keyword">this</span>.n=<span class="number">0</span>;                                   <span class="comment">//还没给内容所以n=0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SeqList()&#123;                               <span class="comment">//无参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">64</span>);                           <span class="comment">//调用第一个构造方法并传入length=64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SeqList(T[] values)&#123;                     <span class="comment">//构造方法，传入数组</span></span><br><span class="line">        <span class="keyword">this</span>(values.length);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;values.length ; i++) &#123;</span><br><span class="line">           <span class="keyword">this</span>.element[i]=values[i];</span><br><span class="line">        <span class="keyword">this</span>.n=element.length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> boolean isEmpty() &#123;                      <span class="comment">//判空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.n==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int size() &#123;                             <span class="comment">//返回大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">get</span>(int i) &#123;                           <span class="comment">//返回序号i的元素</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;<span class="keyword">this</span>.n)</span><br><span class="line">            <span class="keyword">return</span> (T)<span class="keyword">this</span>.element[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void <span class="keyword">set</span>(int i, T x) &#123;                   <span class="comment">//设置序号i的元素为x</span></span><br><span class="line">        <span class="keyword">if</span>(x==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> new NullPointerException(<span class="string">"x==null"</span>);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;<span class="keyword">this</span>.n)</span><br><span class="line">            <span class="keyword">this</span>.element[i]=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> new java.lang.IndexOutOfBoundsException(i+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String toString() &#123;                      <span class="comment">//返回线性表描述的所有字符串</span></span><br><span class="line">        String str=<span class="keyword">this</span>.getClass().getName()+<span class="string">"("</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.n&gt;<span class="number">0</span>)</span><br><span class="line">            str+=<span class="keyword">this</span>.element[<span class="number">0</span>].toString();</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;<span class="keyword">this</span>.n ; i++)</span><br><span class="line">            str+=<span class="string">","</span>+<span class="keyword">this</span>.element[i].toString();</span><br><span class="line">        <span class="keyword">return</span> str+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>插入<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int insert(int i, T x) &#123;                     <span class="comment">//插入x在i位置上</span></span><br><span class="line">    <span class="keyword">if</span> (x==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> new NullPointerException(<span class="string">"x==null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">0</span>)</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="keyword">this</span>.n)</span><br><span class="line">        i=<span class="keyword">this</span>.n;</span><br><span class="line">    Object[] source=<span class="keyword">this</span>.element;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.n==element.length)&#123;                    <span class="comment">//若数组满，则扩容</span></span><br><span class="line">        <span class="keyword">this</span>.element=new Object[element.length];</span><br><span class="line">        <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;i;j++)                        <span class="comment">//扩容后将i前面的元素搬到新数组</span></span><br><span class="line">            <span class="keyword">this</span>.element[j]=source[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int j = <span class="keyword">this</span>.n-<span class="number">1</span>; j &gt;=i; j--)              <span class="comment">//将i后面的数组向后移一位</span></span><br><span class="line">        <span class="keyword">this</span>.element[j+<span class="number">1</span>]=source[j];</span><br><span class="line">    <span class="keyword">this</span>.element[i]=x;</span><br><span class="line">    <span class="keyword">this</span>.n++;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> int insert(T x) &#123;                            <span class="comment">//在顺序表最后插入x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.insert(<span class="keyword">this</span>.n,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T remove(int i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.n&gt;<span class="number">0</span> &amp;&amp; i&gt;=<span class="number">0</span> &amp;&amp; i&lt;<span class="keyword">this</span>.n)&#123;</span><br><span class="line">        T old=(T) <span class="keyword">this</span>.element[i];</span><br><span class="line">        <span class="keyword">for</span> (int j = i; j &lt;<span class="keyword">this</span>.n-<span class="number">1</span> ; j++)          <span class="comment">//将i后面的元素前移</span></span><br><span class="line">            <span class="keyword">this</span>.element[j]=<span class="keyword">this</span>.element[j+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.element[<span class="keyword">this</span>.n-<span class="number">1</span>]=<span class="literal">null</span>;                <span class="comment">//最后一个数组元素对象设为空</span></span><br><span class="line">        <span class="keyword">this</span>.n--;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void clear() &#123;                               <span class="comment">//删除内容但空间还在</span></span><br><span class="line">    <span class="keyword">this</span>.n=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;线性表接口&quot;&gt;&lt;a href=&quot;#线性表接口&quot; class=&quot;headerlink&quot; title=&quot;线性表接口&quot;&gt;&lt;/a&gt;线性表接口&lt;/h2&gt; &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构-前言</title>
    <link href="http://Jamzy1.github.io/2020/02/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%89%8D%E8%A8%80/"/>
    <id>http://Jamzy1.github.io/2020/02/14/数据结构-前言/</id>
    <published>2020-02-14T15:22:04.186Z</published>
    <updated>2020-02-16T14:54:34.647Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p> <strong>新开了数据结构一栏，原本一年前就学完的知识，今天再次拾起，打算十天内学习完，一天一章。</strong><br> 数据结构分为三种：线性结构、树结构、图。<br> 数据结构概念包含三方面:数据的逻辑结构(线性表、树、图), 数据的储存结构(顺序存储结构和链式存储结构)和对数据的操作。<br> 顺序存储结构(数组)使用一组连续的内存单元依次存放数据，数据元素在内存中的物理存储次序与他们的逻辑次序相同。<br> 链式存储结构：结点(数据域，地址域)，通过地址域将关联结点连接起来。<br> 每种数据结构就是一个实现表示抽象数据类型接口的类，每个类提供接口中方法的不同实现。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p> 算法时间代价：算法的时间复杂度表示算法执行时间的增长率而绝非时间；O(1)&lt;O(n)&lt;O(log)&lt;O(n)&lt;O(n$<em>$log)&lt;O(&amp;n^2&amp;)&lt;O(&amp;n^3&amp;)&lt;O(*2^n</em>)<br> 执行n次的循环语句,时间复杂度为O(n)<br> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n=<span class="number">8</span>,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">count++;</span><br></pre></td></tr></table></figure><br> 算法空间代价：算法执行时所占用的存储空间量，由辅助变量占用的存储空间为依据(即声明的临时变量等)</p><h2 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt; &lt;strong&gt;新开了数据结构一栏，原本一年前就学完的知识，今天再次拾起，打算十天内
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 泛型</title>
    <link href="http://Jamzy1.github.io/2020/02/14/JAVA-%E6%B3%9B%E5%9E%8B/"/>
    <id>http://Jamzy1.github.io/2020/02/14/JAVA-泛型/</id>
    <published>2020-02-14T04:53:06.310Z</published>
    <updated>2020-02-14T12:57:55.595Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>泛型类：泛型也称为参数多态，在使用泛型定义的类创建对象时(泛型实例化)，可以根据不同的需求给出类型参数T的具体类型，必须是引用类型(类类型)。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName&lt;T</span> <span class="keyword">extends</span> <span class="title">anyClass&gt;</span>  <span class="title">限制泛型的可用类型，无论anyClass是类还是接口，都用extends关键字。</span></span></span><br></pre></td></tr></table></figure></li><li>泛型方法：泛型方法与其所在的类是否是泛型类没有关系。泛型方法的返回值和其参数类型应该都是泛型而且类型应该一致。<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; 返回值类型 方法名 (T 参数)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>泛型的类型通配符：一是用于创建可从新赋值但不可修改的其内容的泛型对象；二是用在方法的参数中，限制传入不想要的类型实参。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;泛型类：泛型也称为参数多态，在使用泛型定义的类创建对象时(泛型实例化)，可以根据不同的需求
      
    
    </summary>
    
    
      <category term="学习" scheme="http://Jamzy1.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 多线程</title>
    <link href="http://Jamzy1.github.io/2020/02/09/JAVA-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://Jamzy1.github.io/2020/02/09/JAVA-多线程/</id>
    <published>2020-02-09T03:01:25.408Z</published>
    <updated>2020-02-14T05:04:41.860Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="实现线程的两种方式"><a href="#实现线程的两种方式" class="headerlink" title="实现线程的两种方式"></a>实现线程的两种方式</h2><p> 1.继承java.lang包中的Thread类<br> <img src="http://q5d3u8yik.bkt.clouddn.com/Thread.png" alt="avatar"><br> 2.用Runnable接口来创建线程<br> <img src="http://q5d3u8yik.bkt.clouddn.com/Runnable.png" alt="avatar"></p><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p> <img src="http://q5d3u8yik.bkt.clouddn.com/life.png" alt="avatar"></p><h2 id="线程的并发"><a href="#线程的并发" class="headerlink" title="线程的并发"></a>线程的并发</h2><p> 互斥锁：当线程A获得一个对象的互斥锁后，线程B若也想获得该对象的互斥锁，就必须等待线程A完成规定的操作并释放出互斥锁后，才能获得该对象的互斥锁，并执行线程B中的操作。<br> synchronized关键字：首先判断对象或方法的互斥锁是否在，若在就获得互斥锁，然后就可以执行紧随其后的临界代码段或方法体；如果对象或方法的互斥锁不在，就进入等待状态，直到获得互斥锁。<br> 1.多线程设计银行取款<br> <img src="http://q5d3u8yik.bkt.clouddn.com/xiancheng1.png" alt="avatar"><br> 2.synchronized同步语句<br> <img src="http://q5d3u8yik.bkt.clouddn.com/synchronized1.png" alt="avatar"><br> 3.synchronized同步方法<br> <img src="http://q5d3u8yik.bkt.clouddn.com/synchronized2.png" alt="avatar"></p><h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><p> 1.阻塞状态的线程一般情况下可由下列的情况所产生<br>    + 该线程调用对象的wait()方法；<br>    + 该线程本身调用了wait()方法；<br>    + 该线程和另一个线程join()在一起； //加入线程必须要在先执行的线程的start()后面调用join()才能先执行<br>    + 有优先级更高的线程处于就绪状态。<br> 2.解除阻塞的原因有<br>    + 如果线程是由调用对象的wait()方法所阻塞，则该对象的notify()方法被调用时可解除阻塞；<br>    + 线程进入睡眠(sleep)状态，但指定的睡眠时间到了。<br> <img src="http://q5d3u8yik.bkt.clouddn.com/synchronized3.png" alt="avatar"><br> <img src="http://q5d3u8yik.bkt.clouddn.com/synchronized4.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;实现线程的两种方式&quot;&gt;&lt;a href=&quot;#实现线程的两种方式&quot; class=&quot;headerlink&quot; title=&quot;实现线程的两种方式&quot;&gt;&lt;/a&gt;实现线程的两种方式&lt;/h2&gt;&lt;p&gt; 1.继承java.lang包中的Thread
      
    
    </summary>
    
    
      <category term="学习" scheme="http://Jamzy1.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 文件处理-Java.IO</title>
    <link href="http://Jamzy1.github.io/2020/02/08/JAVA-IO/"/>
    <id>http://Jamzy1.github.io/2020/02/08/JAVA-IO/</id>
    <published>2020-02-08T03:33:55.733Z</published>
    <updated>2020-02-09T02:59:43.562Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p> 流是指计算机各部件之间的数据流动。Java只针对流做处理，增强了程序的可移植性。<br> InputStream和OutpuStream通常用来处理“位流”，这种流通常被用来读写诸如图片、音频视频等二进制文件也可读写文本文件，而Reader和Writer类则是用来处理“字符流”，也就是文本文件。</p><ul><li>InputStream(字节输入流类)</li><li>OutputStream(字节输出流类)<br>文件输入输出流(FileInputStream)<br><img src="http://q5d3u8yik.bkt.clouddn.com/InputStream.png" alt="avatar"><br>管道输入输出流<br>过滤输入输出流：在输入输出数据的同时能对所传输的数据做指定类型或格式的转换。<br>标准输入输出：</li><li>Reader(字符输入流类)</li><li>Writer(字符输出流类)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h2&gt;&lt;p&gt; 流是指计算机各部件之间的数据流动。Java只针对流做处理，增强了程序的可移植性。&lt;br&gt; InputStre
      
    
    </summary>
    
    
      <category term="学习" scheme="http://Jamzy1.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 异常处理-Exception</title>
    <link href="http://Jamzy1.github.io/2020/02/07/JAVA-Exception/"/>
    <id>http://Jamzy1.github.io/2020/02/07/JAVA-Exception/</id>
    <published>2020-02-07T04:09:58.409Z</published>
    <updated>2020-02-08T04:22:56.353Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p> 每当JAVA程序运行过程中发生一个可识别的运行错误时，即该错误有一个异常类（最上层Java.lang.Throwable包括两个子类,无法捕捉的Java.lang.Error和Java.lang.Exception）与之对应时，系统都会产生一个相应的给异常类的对象。一旦一个异常对象产生了，系统中就一定有相应的机制来处理它，从而保证整个程序运行的安全性。这就是JAVA异常处理机制。</p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p> 生成异常对象并把它交给运行系统的过程称为抛出异常。在没有任何的处理情况下异常对象会自动的抛给调用端，调用端接收到这个异常对象，由于调用端也没有任何处理，则继续向上抛出给JVM，JVM会打印这个异常对象。<br> 1.在方法体内使用throw语句抛出异常对象<br> 2.在方法头部添加throws子句表示方法将抛出异常<br> 通过这两种方式抛出的异常，在方法中就不必编写try—catch程序段了，因为异常已经被抛到上层，所以交由调用此方法的程序来处理。当然方法体内也可以try-catch处理其他异常。</p><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p> <strong>异常的处理需要先抛出(系统自动抛出和指定方法抛出)，然后再进行捕捉</strong><br> <img src="http://q5d3u8yik.bkt.clouddn.com/try.png" alt="avatar"><br> finally里面适合做方法的资源关闭和首尾工作。方法遇到return形成返回值，后续再修改不会改变返回值;finally是唯一一个可以return一次后还能再return一次的代码块，可以修改方法返回值。<br> RuntimeException可以不编写异常处理的程序代码，仍然可以编译成功，它是在程序运行时才可能发生；而IOException一定要进行捕捉处理才行，它通常用来处理与输入输出有关的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;异常处理机制&quot;&gt;&lt;a href=&quot;#异常处理机制&quot; class=&quot;headerlink&quot; title=&quot;异常处理机制&quot;&gt;&lt;/a&gt;异常处理机制&lt;/h2&gt;&lt;p&gt; 每当JAVA程序运行过程中发生一个可识别的运行错误时，即该错误有一个
      
    
    </summary>
    
    
      <category term="学习" scheme="http://Jamzy1.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>something about my summer vacation</title>
    <link href="http://Jamzy1.github.io/2019/10/24/weekdiary1/"/>
    <id>http://Jamzy1.github.io/2019/10/24/weekdiary1/</id>
    <published>2019-10-24T08:58:35.140Z</published>
    <updated>2020-02-13T16:02:54.100Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><p> &emsp;&emsp;At the end of the summer vacation,I dont want to summarize my summer vacation,but there are two things I want to record.</p><h2 id="Life-Looks-Forward"><a href="#Life-Looks-Forward" class="headerlink" title="Life Looks Forward"></a>Life Looks Forward</h2><p>&emsp;&emsp;The first thing is about my driving test.Maybe I think its easy to me,but accidents will happen,em….yean,I cant test.During that time,I felt that I made a big mistake.Because I should spend two days and five hundred to test again.All of this because of one of my small mistake.<strong>But after that I think its just a trivia <em>(小问题)</em> from my long life.Because life looks forward</strong>,I should jump up of this circle to prepare my new life.And I think experienced this time,the next exam will be easy for me.</p><h2 id="I-just-want-to-be-myself"><a href="#I-just-want-to-be-myself" class="headerlink" title="I just want to be myself"></a>I just want to be myself</h2><p>&emsp;&emsp;Because just myself,so I should solve all my things by myself.And I hope after my Sophomore <em>(大二)</em> I can do this.</p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; &amp;emsp;&amp;emsp;At the end of the summer vacation,I dont want to summarize my summer vacation,but there are two things I 
      
    
    </summary>
    
    
      <category term="weekdiary" scheme="http://Jamzy1.github.io/categories/weekdiary/"/>
    
    
  </entry>
  
  <entry>
    <title>关于学习这件事(持续更新)</title>
    <link href="http://Jamzy1.github.io/2019/10/24/MfirstB/"/>
    <id>http://Jamzy1.github.io/2019/10/24/MfirstB/</id>
    <published>2019-10-24T08:58:35.000Z</published>
    <updated>2020-02-07T05:16:57.739Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="我对学习的看法"><a href="#我对学习的看法" class="headerlink" title="我对学习的看法"></a>我对学习的看法</h2><p>&emsp;&emsp;首先我觉得学习是一件伴随终生的事情，因为只有持续的学习，你才能保持你学到的东西不忘记，其次才能取得更大的进步。<strong>简而言之，坚持学习是你在快速发展的时代下得以生存的根本</strong>。因为在不断学习，所以我对“学习”的认知也会不断更新，这也是这篇文章会持续更新的原因。<br>&emsp;&emsp;不过主观上的学习，对我来说一直是一件非常难的事，于是总想着学习，不如想着要做点什么。所以我认为对一般人来说，<strong>在实现需求的过程中学习，是最持久高效的学习</strong>。比如说搭建这个博客网站，刚开始什么都不懂，搭建过程中你就会学到各种东西。所以如果想学一件东西，不妨先了解一下这件东西能解决什么问题，然后自己从问题下手，直到亲自把问题解决。</p><h2 id="我的学习计划"><a href="#我的学习计划" class="headerlink" title="我的学习计划"></a>我的学习计划</h2><p>&emsp;&emsp;这个博客将是记录我学习的载体，也是我学下去（寻找需求并解决需求）的动力。</p><ul><li><strong>每周日更新一篇全英文的周记</strong><br>&emsp;&emsp;记录本周学到的东西，以及做错的地方；然后再是记录心情与事情。</li><li><strong>每个月1号更新一篇这个月所学到的技术类博文</strong><br>&emsp;&emsp;记录是目前的第一目的，如果能被分享或者对你有帮助，那自然再好不过。</li><li><strong>遇到事情（热点时事）时，可以发表自己的观点博文</strong><br>&emsp;&emsp;把自己的观点发表出来，会使你发现自己逻辑上的漏洞，锻炼自己的思维逻辑能力。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;我对学习的看法&quot;&gt;&lt;a href=&quot;#我对学习的看法&quot; class=&quot;headerlink&quot; title=&quot;我对学习的看法&quot;&gt;&lt;/a&gt;我对学习的看法&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;首先我觉得学习是一件伴随终生的事情，因
      
    
    </summary>
    
    
      <category term="学习" scheme="http://Jamzy1.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
</feed>

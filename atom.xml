<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿正</title>
  
  <subtitle>Still Waters Run Deep</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Jamzy1.github.io/"/>
  <updated>2020-07-01T16:06:29.426Z</updated>
  <id>http://Jamzy1.github.io/</id>
  
  <author>
    <name>史佳正</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分治法</title>
    <link href="http://Jamzy1.github.io/2020/06/26/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    <id>http://Jamzy1.github.io/2020/06/26/分治法/</id>
    <published>2020-06-26T00:59:28.072Z</published>
    <updated>2020-07-01T16:06:29.426Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>分治法，字面意思是“分而治之”，就是把一个复杂的1问题分成两个或多个相同或相似的子问题，再把子问题分成更小的子问题直到最后子问题可以简单地直接求解，原问题的解即子问题的解的合并，这个思想是很多高效算法的基础，例如排序算法(快速排序，归并排序)，傅里叶变换(快速傅里叶变换)等。</p><h3 id="分治法适用于"><a href="#分治法适用于" class="headerlink" title="分治法适用于"></a>分治法适用于</h3><p>1.该问题的规模缩小到一定的程度就可以容易地解决</p><p>2.该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p><p>3.利用该问题分解出的子问题的解可以合并为该问题的解；</p><p>4.该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p><h3 id="常见排序算法的时间复杂度"><a href="#常见排序算法的时间复杂度" class="headerlink" title="常见排序算法的时间复杂度"></a>常见排序算法的时间复杂度</h3><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F.png" alt></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>归并排序是用分治思想，分治模式在每一层递归上有三个步骤：</p><ul><li><p><strong>分解（Divide）</strong>：将n个元素分成个含n/2个元素的子序列。</p></li><li><p><strong>解决（Conquer）</strong>：用合并排序法对两个子序列递归的排序。</p></li><li><p><strong>合并（Combine）</strong>：合并两个已排序的子序列已得到排序结果。</p><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6.webp" alt></p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 归并排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表大小等于或小于该大小，将优先于 mergeSort 使用插入排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSERTION_SORT_THRESHOLD = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        mergeSort(nums, <span class="number">0</span>, len - <span class="number">1</span>, temp);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对数组 nums 的子区间 [left, right] 进行归并排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp  用于合并两个有序数组的辅助数组，全局使用一份，避免多次创建和销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 小区间使用插入排序</span></span><br><span class="line">        <span class="keyword">if</span> (right - left &lt;= INSERTION_SORT_THRESHOLD) &#123;</span><br><span class="line">            insertionSort(nums, left, right);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// Java 里有更优的写法，在 left 和 right 都是大整数时，即使溢出，结论依然正确</span></span><br><span class="line">        <span class="comment">// int mid = (left + right) &gt;&gt;&gt; 1;</span></span><br><span class="line"></span><br><span class="line">        mergeSort(nums, left, mid, temp);</span><br><span class="line">        mergeSort(nums, mid + <span class="number">1</span>, right, temp);</span><br><span class="line">        <span class="comment">// 如果数组的这个子区间本身有序，无需合并</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= nums[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mergeOfTwoSortedArray(nums, left, mid, right, temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对数组 arr 的子区间 [left, right] 使用插入排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   给定数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左边界，能取到</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边界，能取到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; left &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个有序数组：先把值复制到临时数组，再合并回去</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid   [left, mid] 有序，[mid + 1, right] 有序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp  全局使用的临时数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeOfTwoSortedArray</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        System.arraycopy(nums, left, temp, left, right + <span class="number">1</span> - left);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt;= right; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[k] = temp[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == right + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[k] = temp[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[i] &lt;= temp[j]) &#123;</span><br><span class="line">                <span class="comment">// 注意写成 &lt; 就丢失了稳定性（相同元素原来靠前的排序以后依然靠前）</span></span><br><span class="line">                nums[k] = temp[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// temp[i] &gt; temp[kuai]</span></span><br><span class="line">                nums[k] = temp[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><ul><li>1．先从数列中取出一个数作为基准数。</li><li>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li><li>3．再对左右区间重复第二步，直到各区间只有一个数。  </li></ul><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/%E5%BF%AB%E6%8E%92.gif" alt></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序，使得整数数组 arr 有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序，使得整数数组 arr 的 [L, R] 部分有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt; R) &#123;</span><br><span class="line">        <span class="comment">// 把数组中随机的一个元素与最后一个元素交换，这样以最后一个元素作为基准值实际上就是以数组中随机的一个元素作为基准值</span></span><br><span class="line">        swap(arr, <span class="keyword">new</span> Random().nextInt(R - L + <span class="number">1</span>) + L, R);</span><br><span class="line">        <span class="keyword">int</span>[] p = partition(arr, L, R);</span><br><span class="line">        quickSort(arr, L, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, p[<span class="number">1</span>] + <span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分区的过程，整数数组 arr 的[L, R]部分上，使得：</span></span><br><span class="line"><span class="comment"> *   大于 arr[R] 的元素位于[L, R]部分的右边，但这部分数据不一定有序</span></span><br><span class="line"><span class="comment"> *   小于 arr[R] 的元素位于[L, R]部分的左边，但这部分数据不一定有序</span></span><br><span class="line"><span class="comment"> *   等于 arr[R] 的元素位于[L, R]部分的中间</span></span><br><span class="line"><span class="comment"> * 返回等于部分的第一个元素的下标和最后一个下标组成的整数数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] partition(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> basic = arr[R];</span><br><span class="line">    <span class="keyword">int</span> less = L - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> more = R + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(L &lt; more) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[L] &lt; basic) &#123;</span><br><span class="line">            swap(arr, ++less, L++);<span class="comment">//比基数小的放到less的左边 </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[L] &gt; basic) &#123;</span><br><span class="line">            swap(arr, --more, L);<span class="comment">//比基数大的放到more的右边</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; less + <span class="number">1</span>, more - <span class="number">1</span> &#125;;<span class="comment">//less和more中间就是和基数相等的数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 交换数组 arr 中下标为 i 和下标为 j 位置的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1."></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">例题1</a>.</h2><p>求一颗二叉树的最大深度（分治法，先分左右子树，再合并取最大）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分左右子树计算</span></span><br><span class="line">        <span class="keyword">int</span> left=maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right=maxDepth(root.right);</span><br><span class="line">        <span class="comment">//选择合并结果</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(left,right)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2."></a><a href="https://leetcode-cn.com/problems/balanced-binary-tree/" target="_blank" rel="noopener">例题2</a>.</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过1。</p><p>示例 1:</p><p>给定二叉树 [3,9,20,null,null,15,7]</p><pre><code>  3 / \9  20  /  \ 15   7</code></pre><p>返回 true 。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recur(root) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">recur</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = recur(root.left);</span><br><span class="line">        <span class="keyword">if</span>(left == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = recur(root.right);</span><br><span class="line">        <span class="keyword">if</span>(right == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(left - right) &lt; <span class="number">2</span> ? Math.max(left, right) + <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题3"><a href="#例题3" class="headerlink" title="例题3."></a><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">例题3</a>.</h2><p>给定一个非空二叉树，返回其最大路径和。</p><p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。</p><p>示例 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">-10</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">   <span class="number">-10</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br><span class="line"></span><br><span class="line">输出: <span class="number">42</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>二叉树 abc，a 是根结点（递归中的 root），bc 是左右子结点（代表其递归后的最优解）。<br>最大的路径，可能的路径情况：</p><pre><code>  a / \b   c</code></pre><ol><li>b + a + c。</li><li>b + a + a 的父结点。</li><li>a + c + a 的父结点。</li></ol><p>其中情况 1，表示如果不联络父结点的情况，或本身是根结点的情况。这种情况是没法递归的，但是结果有可能是全局最大路径和。情况 2 和 3，递归时计算 a+b 和 a+c，选择一个更优的方案返回，也就是上面说的递归后的最优解啦。</p><p>另外结点有可能是负值，最大和肯定就要想办法舍弃负值（max(0, x)）（max(0,x)）。<br>但是上面 3 种情况，无论哪种，a 作为联络点，都不能够舍弃。</p><p>代码中使用 val 来记录全局最大路径和。<br>ret 是情况 2 和 3。<br>lmr 是情况 1。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回经过root的单边分支最大和， 即Math.max(root, root+left, root+right)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算左边分支最大值，左边分支如果为负数还不如不选择</span></span><br><span class="line">        <span class="keyword">int</span> leftMax = Math.max(<span class="number">0</span>, dfs(root.left));</span><br><span class="line">        <span class="comment">//计算右边分支最大值，右边分支如果为负数还不如不选择</span></span><br><span class="line">        <span class="keyword">int</span> rightMax = Math.max(<span class="number">0</span>, dfs(root.right));</span><br><span class="line">        <span class="comment">//left-&gt;root-&gt;right 作为路径与历史最大值做比较</span></span><br><span class="line">        max = Math.max(max, root.val + leftMax + rightMax);</span><br><span class="line">        <span class="comment">// 返回经过root的单边最大分支给上游</span></span><br><span class="line">        <span class="keyword">return</span> root.val + Math.max(leftMax, rightMax);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="例题4-后续遍历DFS"><a href="#例题4-后续遍历DFS" class="headerlink" title="例题4.(后续遍历DFS)"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">例题4</a>.(后续遍历DFS)</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">3</span></span><br><span class="line">     /    \</span><br><span class="line">    <span class="number">5</span>      <span class="number">1</span></span><br><span class="line">    /  \    /  \</span><br><span class="line">   <span class="number">6</span>    <span class="number">2</span>   <span class="number">0</span>   <span class="number">8</span></span><br><span class="line">       /  \ </span><br><span class="line">      <span class="number">7</span>    <span class="number">4</span></span><br><span class="line">输入: root = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">7</span>,<span class="number">4</span>], p = <span class="number">5</span>, q = <span class="number">1</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 节点 <span class="number">5</span> 和节点 <span class="number">1</span> 的最近公共祖先是节点 <span class="number">3</span>。</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><strong>祖先的定义：</strong> 若节点 p在节点 root 的左（右）子树中，或 p = root，则称 root是 p 的祖先。</p><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/%E4%BE%8B%E9%A2%984.1.png" alt></p><p><strong>最近公共祖先的定义：</strong> 设节点 root 为节点 p, q的某公共祖先，若其左子节点 root.left 和右子节点 root.right 都不是 p,q 的公共祖先，则称 root是 “最近的公共祖先” 。</p><p>根据以上定义，若 root 是 p, q 的 最近公共祖先 ，则只可能为以下情况之一：</p><p>pp 和 q 在 root 的子树中，且分列 root 的 异侧（即分别在左、右子树中）；<br>p = root ，且 q 在 root 的左或右子树中；<br>q = root，且 p 在 root 的左或右子树中；</p><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/%E4%BE%8B%E9%A2%984.2.png" alt></p><p>考虑通过递归对二叉树进行后序遍历，当遇到节点 p 或 q 时返回。从底至顶回溯，当节点 p, q在节点 root的异侧时，节点 root 即为最近公共祖先，则向上返回 root 。</p><p><strong>递归解析：</strong><br><strong>终止条件：</strong><br>当越过叶节点，则直接返回 null ；<br>当 root 等于 p, q，则直接返回 root ；<br><strong>递推工作：</strong><br>开启递归左子节点，返回值记为left ；<br>开启递归右子节点，返回值记为 right ；<br>返回值： 根据 left 和 right ，可展开为四种情况；<br>当 left和 right 同时为空 ：说明 root的左 / 右子树中都不包含 p,q，返回 null ；<br>当 left和 right 同时不为空 ：说明 p, q 分列在 root 的 异侧 （分别在 左 / 右子树），因此 rootroot 为最近公共祖先，返回 root；<br>当 left 为空 ，right 不为空 ：p,q 都不在 root 的左子树中，直接返回 right 。具体可分为两种情况：<br>p,q 其中一个在 root 的 右子树 中，此时 right指向 pp（假设为 pp ）；<br>p,q两节点都在 root的 右子树 中，此时的 right 指向 最近公共祖先节点 ；<br>当 left不为空 ， right为空 ：与情况 3. 同理；</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span>) <span class="keyword">return</span> right; <span class="comment">// 3.</span></span><br><span class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>) <span class="keyword">return</span> left; <span class="comment">// 4.</span></span><br><span class="line">        <span class="keyword">return</span> root; <span class="comment">// 2. if(left != null and right != null)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;分治法，字面意思是“分而治之”，就是把一个复杂的1问题分成两个或多个相同或相似的子问题，再把子问题分
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>BFS广度优先搜索</title>
    <link href="http://Jamzy1.github.io/2020/06/25/BFS%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <id>http://Jamzy1.github.io/2020/06/25/BFS广度优先搜索/</id>
    <published>2020-06-25T03:01:11.273Z</published>
    <updated>2020-07-02T04:11:23.191Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>广度优先搜索旨在面临一个路口时，把所有的岔路口都记下来，然后选择其中一个进入，然后将它的分路情况记录下来，然后再返回来进入另外一个岔路，并重复这样的操作。</p><h2 id="树和图的BFS"><a href="#树和图的BFS" class="headerlink" title="树和图的BFS"></a>树和图的BFS</h2><ol><li>tree只有1个root，而图可以有多个源点，所以首先需要把多个源点都入队。</li><li>tree是有向的因此不需要标志是否访问过，而对于无向图来说，必须得标志是否访问过！并且为了防止某个节点多次入队，需要在入队之前就将其设置成已访问！</li></ol><p><strong>关键点是状态的选取和标记</strong></p><h1 id="例题1-图的BFS"><a href="#例题1-图的BFS" class="headerlink" title="例题1(图的BFS)."></a><a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/" target="_blank" rel="noopener">例题1(图的BFS)</a>.</h1><p>你现在手里有一份大小为 N x N 的「地图」（网格） grid，上面的每个「区域」（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，请你找出一个海洋区域，这个海洋区域到离它最近的陆地区域的距离是最大的。</p><p>我们这里说的距离是「曼哈顿距离」（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。</p><p>如果我们的地图上只有陆地或者海洋，请返回 -1。</p><p>示例 ：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释： </span><br><span class="line">海洋区域 (<span class="number">1</span>, <span class="number">1</span>) 和所有陆地区域之间的距离都达到最大，最大距离为 <span class="number">2</span>。</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先把所有的陆地都入队，然后从各个陆地<strong>同时开始</strong>一层一层的向海洋扩散，那么最后扩散到的海洋就是最远的海洋！并且这个海洋肯定是被离他最近的陆地给扩散到的！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dx = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] dy = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> m = grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">// 先把所有的陆地都入队。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从各个陆地开始，一圈一圈的遍历海洋，最后遍历到的海洋就是离陆地最远的海洋。</span></span><br><span class="line">    <span class="keyword">boolean</span> hasOcean = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span>[] point = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        point = queue.poll();</span><br><span class="line">        <span class="keyword">int</span> x = point[<span class="number">0</span>], y = point[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 取出队列的元素，将其四周的海洋入队。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = x + dx[i];</span><br><span class="line">            <span class="keyword">int</span> newY = y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;= m || newY &lt; <span class="number">0</span> || newY &gt;= n || grid[newX][newY] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            grid[newX][newY] = grid[x][y] + <span class="number">1</span>; <span class="comment">// 这里我直接修改了原数组，因此就不需要额外的数组来标志是否访问</span></span><br><span class="line">            hasOcean = <span class="keyword">true</span>;</span><br><span class="line">            queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;newX, newY&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有陆地或者没有海洋，返回-1。</span></span><br><span class="line">    <span class="keyword">if</span> (point == <span class="keyword">null</span> || !hasOcean) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最后一次遍历到的海洋的距离。</span></span><br><span class="line">    <span class="keyword">return</span> grid[point[<span class="number">0</span>]][point[<span class="number">1</span>]] - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题2-BFS层次应用"><a href="#例题2-BFS层次应用" class="headerlink" title="例题2(BFS层次应用)."></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">例题2(BFS层次应用)</a>.</h1><p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        queue.add(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = queue.size();</span><br><span class="line">        List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            level.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> ans;</span><br><span class="line">       &#125;</span><br><span class="line">       Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">       q.add(root);</span><br><span class="line">       <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">           List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           <span class="keyword">int</span> len = q.size();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">               TreeNode node = q.poll();</span><br><span class="line">               tmp.add(node.val);</span><br><span class="line">               <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   q.add(node.left);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   q.add(node.right);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 在索引 0 的位置加入一维数组 tmp</span></span><br><span class="line">           <span class="comment">// 每次新的数组进来都会被放在开始的位置</span></span><br><span class="line">           ans.add(<span class="number">0</span>, tmp);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;广度优先搜索旨在面临一个路口时，把所有的岔路口都记下来，然后选择其中一个进入，然后将它的分路情况记录
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>DFS深度优先搜索</title>
    <link href="http://Jamzy1.github.io/2020/06/24/DFS%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <id>http://Jamzy1.github.io/2020/06/24/DFS深度优先搜索/</id>
    <published>2020-06-24T03:46:34.308Z</published>
    <updated>2020-06-25T03:47:21.855Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>深度优先搜索算法（Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。DFS的重要点在于状态回溯。</p><p><strong>先一条路走到底，不成功就返回上个路口继续选择其他方向</strong></p><h4 id="从上到下"><a href="#从上到下" class="headerlink" title="从上到下"></a>从上到下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;  <span class="comment">//从上到下搜索并输出，根、左、右</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode left;</span><br><span class="line">TreeNode right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    dfs(root,res);</span><br><span class="line">    <span class="keyword">return</span> res;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">dfs</span><span class="params">(TreeNode root,List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.add(root.val);</span><br><span class="line">    dfs(root.left,res);</span><br><span class="line">    dfs(root.right,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1."></a><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener">例题1</a>.</h2><p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">4</span>]</span><br><span class="line">输出: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>            &lt;---</span><br><span class="line"> /   \</span><br><span class="line"><span class="number">2</span>     <span class="number">3</span>         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  <span class="number">5</span>     <span class="number">4</span>       &lt;---</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们按照 「根结点 -&gt; 右子树 -&gt; 左子树」 的顺序访问，就可以保证每层都是最先访问最右边的节点的。</p><p>（与先序遍历 「根结点 -&gt; 左子树 -&gt; 右子树」 正好相反，先序遍历每层最先访问的是最左边的节点）</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>class Solution {<br>    List<Integer> res = new ArrayList&lt;&gt;();</Integer></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    dfs(root, <span class="number">0</span>); <span class="comment">// 从根节点开始访问，根节点深度是0</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先访问 当前节点，再递归地访问 右子树 和 左子树。</span></span><br><span class="line">    <span class="keyword">if</span> (depth == res.size()) &#123;   <span class="comment">// 如果当前节点所在深度还没有出现在res里，说明在该深度下当前节点是第一个被访问的节点，因此将当前节点加入res中。</span></span><br><span class="line">        res.add(root.val);       <span class="comment">//res中加的都是每一层（每个深度）下第一个被访问的结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    depth++;</span><br><span class="line">   dfs(root.right, depth);</span><br><span class="line">    dfs(root.left, depth);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2."></a><a href="https://leetcode-cn.com/problems/01-matrix/" target="_blank" rel="noopener">例题2</a>.</h2><p>给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。</p><p>两个相邻元素间的距离为 1 。</p><p><strong>示例 :</strong><br>输入:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>先将0入队，将1标记为-1</p><p>找到与0相邻-1，标记为0+1（距离加一），标记完再入队</p><p>继续遍历队列，遍历到1时周围要是也有1则距离为（1+1）</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] updateMatrix(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] dx = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dy = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> m=matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;m;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;n;y++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;x, y&#125;);  <span class="comment">//将0入队</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(matrix[x][y]==<span class="number">1</span>)&#123;</span><br><span class="line">                    matrix[x][y]=-<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] point=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            point=queue.poll();</span><br><span class="line">            <span class="keyword">int</span> x=point[<span class="number">0</span>],y=point[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> newX = x + dx[i];</span><br><span class="line">                <span class="keyword">int</span> newY = y + dy[i];</span><br><span class="line">                <span class="keyword">if</span>(newX&gt;=<span class="number">0</span>&amp;&amp;newX&lt;m&amp;&amp;newY&gt;=<span class="number">0</span>&amp;&amp;newY&lt;n&amp;&amp;matrix[newX][newY]==-<span class="number">1</span>)&#123; <span class="comment">//0周围的1</span></span><br><span class="line">                    matrix[newX][newY]=matrix[x][y]+<span class="number">1</span>; <span class="comment">//距离加一</span></span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;newX, newY&#125;);</span><br><span class="line">                &#125;       </span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;深度优先搜索算法（Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。沿
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树遍历</title>
    <link href="http://Jamzy1.github.io/2020/06/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <id>http://Jamzy1.github.io/2020/06/23/二叉树遍历/</id>
    <published>2020-06-23T04:00:28.791Z</published>
    <updated>2020-07-02T04:11:26.881Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h1 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h1><p><strong>前序遍历</strong>：<strong>先访问根节点</strong>，再前序遍历左子树，再前序遍历右子树 <strong>中序遍历</strong>：先中序遍历左子树，<strong>再访问根节点</strong>，再中序遍历右子树 <strong>后序遍历</strong>：先后序遍历左子树，再后序遍历右子树，<strong>再访问根节点</strong></p><p>注意点</p><ul><li>以根访问顺序决定是什么遍历</li><li>左子树都是优先于右子树</li></ul><h2 id="前序递归"><a href="#前序递归" class="headerlink" title="前序递归"></a>前序递归</h2><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/20190820000853382.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qianxu</span><span class="params">(node root)</span> <span class="comment">// 前序递归 前序遍历：根结点 ---&gt; 左子树 ---&gt; 右子树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(root.value + <span class="string">" "</span>);<span class="comment">// 当前节点</span></span><br><span class="line">qianxu(root.left);</span><br><span class="line">qianxu(root.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序递归"><a href="#中序递归" class="headerlink" title="中序递归"></a>中序递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zhongxu</span><span class="params">(node root)</span><span class="comment">// 中序遍历 中序遍历：左子树---&gt; 根结点 ---&gt; 右子树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">zhongxu(root.left);</span><br><span class="line">System.out.print(root.value + <span class="string">" "</span>);<span class="comment">// 访问完左节点访问当前节点</span></span><br><span class="line">zhongxu(root.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序递归"><a href="#后序递归" class="headerlink" title="后序递归"></a>后序递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">houxu</span><span class="params">(node root)</span><span class="comment">// 后序遍历 后序遍历：左子树 ---&gt; 右子树 ---&gt; 根结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">houxu(root.left);</span><br><span class="line">houxu(root.right);</span><br><span class="line">System.out.print(root.value + <span class="string">" "</span>); <span class="comment">// 访问玩左右访问当前节点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>===============================================================</em></strong></p><h2 id="非递归前序"><a href="#非递归前序" class="headerlink" title="非递归前序"></a>非递归前序</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/20190820125033981.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qianxu3</span><span class="params">(node t)</span><span class="comment">// 非递归前序 栈 先左后右  t一般为root</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack&lt;node&gt; q1 = <span class="keyword">new</span> Stack&lt;node&gt;();</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t);<span class="comment">//结点进栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q1.empty()) &#123;</span><br><span class="line">node t1 = q1.pop();<span class="comment">//结点出栈</span></span><br><span class="line"><span class="keyword">if</span> (t1.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t1.right);<span class="comment">//先让右进栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t1.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t1.left);<span class="comment">//再让左进栈，进完又循环，先出栈</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(t1.value + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qianxu2</span><span class="params">(node t)</span> </span>&#123;</span><br><span class="line">Stack&lt;node&gt; q1 = <span class="keyword">new</span> Stack();</span><br><span class="line"><span class="keyword">while</span>(!q1.isEmpty()||t!=<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(t.value+<span class="string">" "</span>);<span class="comment">//栈内元素都是打印过的，栈只是为了让t可回退，回退后才能取到t.right</span></span><br><span class="line">q1.push(t);</span><br><span class="line">t=t.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t=q1.pop();</span><br><span class="line">t=t.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归中序"><a href="#非递归中序" class="headerlink" title="非递归中序"></a>非递归中序</h2><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/20190820183037577.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zhongxu2</span><span class="params">(node t)</span> </span>&#123;</span><br><span class="line">Stack&lt;node&gt; q1 = <span class="keyword">new</span> Stack();</span><br><span class="line"><span class="keyword">while</span>(!q1.isEmpty()||t!=<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t!=<span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t);   <span class="comment">//如果t!=null，则将左边的一直存进栈，直到存到底</span></span><br><span class="line">t=t.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t=q1.pop();  <span class="comment">//从左边底部将元素取出，取完会回退再娶到右边，其实也是模拟了递归的过程</span></span><br><span class="line">System.out.print(t.value+<span class="string">" "</span>);</span><br><span class="line">t=t.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归后序"><a href="#非递归后序" class="headerlink" title="非递归后序"></a>非递归后序</h2><h3 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h3><p><img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/20190821185244847.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">houxu2</span><span class="params">(node t)</span> </span>&#123;<span class="comment">//map记录节点出现次数，双访问才输出</span></span><br><span class="line">Stack&lt;node&gt; q1 = <span class="keyword">new</span> Stack();</span><br><span class="line">Map&lt;Integer,Integer &gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(!q1.isEmpty()||t!=<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t!=<span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t);</span><br><span class="line">map.put(t.value, <span class="number">1</span>); <span class="comment">//t.value标记这个值节点出现的次数</span></span><br><span class="line">t=t.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t=q1.peek();</span><br><span class="line"><span class="keyword">if</span>(map.get(t.value)==<span class="number">2</span>) &#123;<span class="comment">//只有访问两次的才输出和抛出</span></span><br><span class="line">q1.pop();</span><br><span class="line">System.out.print(t.value+<span class="string">" "</span>);</span><br><span class="line">t=<span class="keyword">null</span>;<span class="comment">//需要往上走</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">map.put(t.value, <span class="number">2</span>);</span><br><span class="line">t=t.right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法二（双栈）"><a href="#法二（双栈）" class="headerlink" title="法二（双栈）"></a>法二（双栈）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">houxu3</span><span class="params">(node t)</span><span class="comment">// q1和q2 q1要先右后左，先遍历右侧，q1先装右侧就把右侧放到前面，左侧放在上面（栈顶）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack&lt;node&gt; q1 = <span class="keyword">new</span> Stack();</span><br><span class="line">Stack&lt;node&gt; q2 = <span class="keyword">new</span> Stack();</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q1.isEmpty()) &#123;<span class="comment">//t1按中、左、右进栈</span></span><br><span class="line">node t1 = q1.pop();</span><br><span class="line">q2.push(t1);<span class="comment">//t2按中、右、左进栈</span></span><br><span class="line"><span class="keyword">if</span> (t1.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t1.left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t1.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">q1.push(t1.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q2.isEmpty()) &#123;<span class="comment">//t2按左、右、中出栈并打印</span></span><br><span class="line">node t1 = q2.pop();</span><br><span class="line">System.out.print(t1.value + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>===============================================================</em></strong></p><h2 id="层序遍历-BFS层次应用"><a href="#层序遍历-BFS层次应用" class="headerlink" title="层序遍历(BFS层次应用)"></a>层序遍历(BFS层次应用)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cengxu</span><span class="params">(node t)</span> </span>&#123;<span class="comment">//队列实现层序遍历</span></span><br><span class="line">Queue&lt;node&gt; q1 = <span class="keyword">new</span> ArrayDeque&lt;node&gt;();</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">q1.add(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q1.isEmpty()) &#123;</span><br><span class="line">node t1 = q1.poll();</span><br><span class="line"><span class="keyword">if</span> (t1.left != <span class="keyword">null</span>)</span><br><span class="line">q1.add(t1.left);</span><br><span class="line"><span class="keyword">if</span> (t1.right != <span class="keyword">null</span>)</span><br><span class="line">q1.add(t1.right);</span><br><span class="line">System.out.print(t1.value + <span class="string">" "</span>);<span class="comment">//输出时已将其左右子结点放入队里</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;二叉树遍历&quot;&gt;&lt;a href=&quot;#二叉树遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树遍历&quot;&gt;&lt;/a&gt;二叉树遍历&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前序遍历&lt;/strong&gt;：&lt;strong&gt;先访问根节点&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>单链表逆转</title>
    <link href="http://Jamzy1.github.io/2020/02/26/%E5%8D%95%E9%93%BE%E8%A1%A8%E9%80%86%E8%BD%AC/"/>
    <id>http://Jamzy1.github.io/2020/02/26/单链表逆转/</id>
    <published>2020-02-26T13:48:55.686Z</published>
    <updated>2020-06-22T05:07:21.496Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><p> 将单链表中各结点的next域改为指向其前驱结点，原第一个结点的next域为空，head改为指向原先的最后一个结点。<br> list.head.next表示第一个元素</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyList_reverse</span> </span>&#123;           <span class="comment">//单链表逆转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(SinglyList&lt;T&gt; list)</span></span>&#123;</span><br><span class="line">        Node&lt;T&gt; p=list.head.next,succ=<span class="keyword">null</span>,front=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            succ=p.next;        <span class="comment">//p的下一结点存在succ</span></span><br><span class="line">            p.next=front;       <span class="comment">//将p的下一结点指向front</span></span><br><span class="line">            front=p;            <span class="comment">//front向后走一步</span></span><br><span class="line">            p=succ;             <span class="comment">//p向后走一步</span></span><br><span class="line">        &#125;</span><br><span class="line">        list.head.next=front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String value[] = &#123; <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span> &#125;;</span><br><span class="line">        SinglyList&lt;String&gt; list = <span class="keyword">new</span> SinglyList&lt;String&gt;(value);</span><br><span class="line">        System.out.println(<span class="string">"list: "</span> + list.toString());</span><br><span class="line">        reverse(list);</span><br><span class="line">        System.out.println(<span class="string">"逆转后 "</span> + list.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; 将单链表中各结点的next域改为指向其前驱结点，原第一个结点的next域为空，head改为指向原先的最后一个结点。&lt;br&gt; list.head.next表示第一个元素&lt;/p&gt;
 &lt;figure class=&quot;highlight jav
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>顺序表实现Josephus问题</title>
    <link href="http://Jamzy1.github.io/2020/02/19/Josephus%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
    <id>http://Jamzy1.github.io/2020/02/19/Josephus约瑟夫环/</id>
    <published>2020-02-19T02:19:46.074Z</published>
    <updated>2020-06-22T03:42:55.213Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p> 古代某法官要判决number个犯人的死刑，他有一条荒唐的法律：让囚犯站成一个圆圈，从第start个人开始数起，每数到第distance个犯人，就拉出去处决，然后再次数distance个人，再次进行处决，，，，直到最后只剩一个人，这个人会被赦免，当number = 5，start = 0，distance = 3时，过程如下：</p><p> <img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/Josephus.png" alt="avatar"><br> 代码实现<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Josephus</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Josephus</span><span class="params">(<span class="keyword">int</span> number ,<span class="keyword">int</span> start ,<span class="keyword">int</span> distance)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Josephus("</span>+number+<span class="string">","</span>+start+<span class="string">","</span>+distance+<span class="string">"),"</span>);</span><br><span class="line">       SeqList&lt;String&gt; list=<span class="keyword">new</span> SeqList&lt;String&gt;(number);                   <span class="comment">//创建顺序表并给容量number</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;number ; i++)</span><br><span class="line">           list.insert((<span class="keyword">char</span>)(<span class="string">'A'</span>+i)+<span class="string">""</span>);                                  <span class="comment">//给内容ABC...</span></span><br><span class="line">       System.out.println(list.toString());                                <span class="comment">//打印成字符串</span></span><br><span class="line">       <span class="keyword">int</span> i=start;</span><br><span class="line">       <span class="keyword">while</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">           i=(i+distance-<span class="number">1</span>) % list.size();                                 <span class="comment">//用取余防止数组越界</span></span><br><span class="line">           System.out.println(<span class="string">"删除"</span>+list.remove(i).toString()+<span class="string">","</span>);</span><br><span class="line">           System.out.println(list.toString());</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"被赦免者是"</span>+list.get(<span class="number">0</span>).toString());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> Josephus(<span class="number">26</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt; 古代某法官要判决number个犯人的死刑，他有一条荒唐的法律：让囚犯站成一个圆圈，从
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="http://Jamzy1.github.io/2020/02/16/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://Jamzy1.github.io/2020/02/16/线性表/</id>
    <published>2020-02-16T15:00:03.948Z</published>
    <updated>2020-06-22T02:23:26.220Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="线性表接口"><a href="#线性表接口" class="headerlink" title="线性表接口"></a>线性表接口</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i,T x)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,T x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T x)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(T key)</span></span>;              <span class="comment">//查找首次出现的与key相等元素，返回元素序号i</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertDifferent</span><span class="params">(T x)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(T key)</span></span>;                <span class="comment">//删除首次出现的与key相等元素，返回被删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;T&gt; list)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性表的顺序存储和实现（顺序表即数组）"><a href="#线性表的顺序存储和实现（顺序表即数组）" class="headerlink" title="线性表的顺序存储和实现（顺序表即数组）"></a>线性表的顺序存储和实现（顺序表即数组）</h2><p><strong>顺序表</strong>是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。<strong>线性表采用顺序存储的方式存储就称之为顺序表。</strong>顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。<br>从顺序表的定义上可以看出，顺序表就是数组。二者只是不同领域中的称呼。顺序表是数据结构中的专有名词，而数组是在C语言或者其它编程语言中的一种数据类型。可以说，数组是顺序表在实际编程中的具体实现方式。</p><ol><li>创建顺序表类，并实现线性表List几个简单的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Object[] element;<span class="comment">//element.length是顺序表空间大小</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> n;<span class="comment">//this.n是内容的多少</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;                     <span class="comment">//第一个构造方法,定义容量为length</span></span><br><span class="line">        <span class="keyword">this</span>.element=<span class="keyword">new</span> Object[length];</span><br><span class="line">        <span class="keyword">this</span>.n=<span class="number">0</span>;                                   <span class="comment">//还没给内容所以n=0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">()</span></span>&#123;                               <span class="comment">//无参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">64</span>);                           <span class="comment">//调用第一个构造方法并传入length=64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">(T[] values)</span></span>&#123;                     <span class="comment">//构造方法，传入数组</span></span><br><span class="line">        <span class="keyword">this</span>(values.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;values.length ; i++) &#123;</span><br><span class="line">           <span class="keyword">this</span>.element[i]=values[i];</span><br><span class="line">        <span class="keyword">this</span>.n=element.length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;                      <span class="comment">//判空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.n==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;                             <span class="comment">//返回大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;                           <span class="comment">//返回序号i的元素</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;<span class="keyword">this</span>.n)</span><br><span class="line">            <span class="keyword">return</span> (T)<span class="keyword">this</span>.element[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i, T x)</span> </span>&#123;                   <span class="comment">//设置序号i的元素为x</span></span><br><span class="line">        <span class="keyword">if</span>(x==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"x==null"</span>);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;<span class="keyword">this</span>.n)</span><br><span class="line">            <span class="keyword">this</span>.element[i]=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IndexOutOfBoundsException(i+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;                      <span class="comment">//返回线性表描述的所有字符串</span></span><br><span class="line">        String str=<span class="keyword">this</span>.getClass().getName()+<span class="string">"("</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.n&gt;<span class="number">0</span>)</span><br><span class="line">            str+=<span class="keyword">this</span>.element[<span class="number">0</span>].toString();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="keyword">this</span>.n ; i++)</span><br><span class="line">            str+=<span class="string">","</span>+<span class="keyword">this</span>.element[i].toString();</span><br><span class="line">        <span class="keyword">return</span> str+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>插入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, T x)</span> </span>&#123;                     <span class="comment">//插入x在i位置上</span></span><br><span class="line">    <span class="keyword">if</span> (x==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"x==null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">0</span>)</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="keyword">this</span>.n)</span><br><span class="line">        i=<span class="keyword">this</span>.n;</span><br><span class="line">    Object[] source=<span class="keyword">this</span>.element;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.n==element.length)&#123;                    <span class="comment">//若数组满，则扩容</span></span><br><span class="line">        <span class="keyword">this</span>.element=<span class="keyword">new</span> Object[element.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)                        <span class="comment">//扩容后将i前面的元素搬到新数组</span></span><br><span class="line">            <span class="keyword">this</span>.element[j]=source[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="keyword">this</span>.n-<span class="number">1</span>; j &gt;=i; j--)              <span class="comment">//将i后面的数组向后移一位</span></span><br><span class="line">        <span class="keyword">this</span>.element[j+<span class="number">1</span>]=source[j];</span><br><span class="line">    <span class="keyword">this</span>.element[i]=x;</span><br><span class="line">    <span class="keyword">this</span>.n++;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(T x)</span> </span>&#123;                            <span class="comment">//在顺序表最后插入x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.insert(<span class="keyword">this</span>.n,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.n&gt;<span class="number">0</span> &amp;&amp; i&gt;=<span class="number">0</span> &amp;&amp; i&lt;<span class="keyword">this</span>.n)&#123;</span><br><span class="line">        T old=(T) <span class="keyword">this</span>.element[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;<span class="keyword">this</span>.n-<span class="number">1</span> ; j++)          <span class="comment">//将i后面的元素前移</span></span><br><span class="line">            <span class="keyword">this</span>.element[j]=<span class="keyword">this</span>.element[j+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.element[<span class="keyword">this</span>.n-<span class="number">1</span>]=<span class="keyword">null</span>;                <span class="comment">//最后一个数组元素对象设为空</span></span><br><span class="line">        <span class="keyword">this</span>.n--;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;                               <span class="comment">//删除内容但空间还在</span></span><br><span class="line">    <span class="keyword">this</span>.n=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>查找<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="keyword">this</span>.n ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(<span class="keyword">this</span>.element[i]))</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.search(key)!=-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>比较线性表是否相等<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;             <span class="comment">//比较两个顺序表是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>==obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> SeqList&lt;?&gt;) &#123;</span><br><span class="line">        SeqList&lt;T&gt; list=(SeqList&lt;T&gt;)obj;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.n==list.n)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(<span class="keyword">this</span>.get(i).equals(list.get(i))))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性表的链式存储和实现（链表）"><a href="#线性表的链式存储和实现（链表）" class="headerlink" title="线性表的链式存储和实现（链表）"></a>线性表的链式存储和实现（链表）</h2></li></ol>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;线性表接口&quot;&gt;&lt;a href=&quot;#线性表接口&quot; class=&quot;headerlink&quot; title=&quot;线性表接口&quot;&gt;&lt;/a&gt;线性表接口&lt;/h2&gt; &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构-前言</title>
    <link href="http://Jamzy1.github.io/2020/02/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%89%8D%E8%A8%80/"/>
    <id>http://Jamzy1.github.io/2020/02/14/数据结构-前言/</id>
    <published>2020-02-14T15:22:04.186Z</published>
    <updated>2020-06-22T05:10:22.944Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p> 数据结构分为三种：线性结构、树结构、图。<br> 数据结构概念包含三方面:数据的逻辑结构(线性表、树、图), 数据的储存结构(顺序存储结构和链式存储结构)和对数据的操作。<br> 顺序存储结构(数组)使用一组连续的内存单元依次存放数据，数据元素在内存中的物理存储次序与他们的逻辑次序相同。<br> 链式存储结构：结点(数据域，地址域)，通过地址域将关联结点连接起来。<br> 每种数据结构就是一个实现表示抽象数据类型接口的类，每个类提供接口中方法的不同实现。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p> 算法时间代价：算法的时间复杂度表示算法执行时间的增长率而绝非时间；O(1)&lt;O(n)&lt;O(log)&lt;O(n)&lt;O(n$<em>$log)&lt;O(&amp;n^2&amp;)&lt;O(&amp;n^3&amp;)&lt;O(*2^n</em>)<br> 执行n次的循环语句,时间复杂度为O(n)<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">count++;</span><br></pre></td></tr></table></figure><br> 算法空间代价：算法执行时所占用的存储空间量，由辅助变量占用的存储空间为依据(即声明的临时变量等)</p><h2 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt; 数据结构分为三种：线性结构、树结构、图。&lt;br&gt; 数据结构概念包含三方面:数据的逻辑
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 泛型</title>
    <link href="http://Jamzy1.github.io/2020/02/14/JAVA-%E6%B3%9B%E5%9E%8B/"/>
    <id>http://Jamzy1.github.io/2020/02/14/JAVA-泛型/</id>
    <published>2020-02-14T04:53:06.310Z</published>
    <updated>2020-06-22T04:26:51.885Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>泛型类：泛型也称为参数多态，在使用泛型定义的类创建对象时(泛型实例化)，可以根据不同的需求给出类型参数T的具体类型，必须是引用类型(类类型)。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName&lt;T</span> <span class="keyword">extends</span> <span class="title">anyClass&gt;</span>  <span class="title">限制泛型的可用类型，无论anyClass是类还是接口，都用extends关键字。</span></span></span><br></pre></td></tr></table></figure></li><li>泛型方法：泛型方法与其所在的类是否是泛型类没有关系。泛型方法的返回值和其参数类型应该都是泛型而且类型应该一致。<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; 返回值类型 方法名 (T 参数)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>泛型的类型通配符：一是用于创建可从新赋值但不可修改的其内容的泛型对象；二是用在方法的参数中，限制传入不想要的类型实参。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;泛型类：泛型也称为参数多态，在使用泛型定义的类创建对象时(泛型实例化)，可以根据不同的需求
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 多线程</title>
    <link href="http://Jamzy1.github.io/2020/02/09/JAVA-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://Jamzy1.github.io/2020/02/09/JAVA-多线程/</id>
    <published>2020-02-09T03:01:25.408Z</published>
    <updated>2020-06-22T05:02:07.124Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="实现线程的两种方式"><a href="#实现线程的两种方式" class="headerlink" title="实现线程的两种方式"></a>实现线程的两种方式</h2><p> 1.继承java.lang包中的Thread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String who;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String str)</span></span>&#123;        <span class="comment">//构造方法，用于设置成员变量who</span></span><br><span class="line">        who=str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;                  <span class="comment">//覆盖Thread类里的run()方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                sleep((<span class="keyword">int</span>)(<span class="number">1000</span>*Math.random()));       <span class="comment">//控制线程睡眠时间为0~1秒之间的随机数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">            System.out.println(who+<span class="string">"正在运行！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread you=<span class="keyword">new</span> MyThread(<span class="string">"你"</span>);</span><br><span class="line">        MyThread she=<span class="keyword">new</span> MyThread(<span class="string">"她"</span>);</span><br><span class="line">        </span><br><span class="line">        you.start();</span><br><span class="line">        she.start();            <span class="comment">//同时激活线程</span></span><br><span class="line">        System.out.println(<span class="string">"主方法main()运行结束！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.用Runnable接口来创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread1 you=<span class="keyword">new</span> MyThread1(<span class="string">"你"</span>);</span><br><span class="line">        MyThread1 she=<span class="keyword">new</span> MyThread1(<span class="string">"她"</span>);</span><br><span class="line">        Thread ti=<span class="keyword">new</span> Thread(you);      <span class="comment">//产生Thread类的对象ti</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(she);</span><br><span class="line">        ti.start();</span><br><span class="line">        t2.start();            <span class="comment">//同时激活线程</span></span><br><span class="line">        System.out.println(<span class="string">"主方法main()运行结束！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;        <span class="comment">//由runnable接口实现MyThread类</span></span><br><span class="line">    <span class="keyword">private</span> String who;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        who=str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep((<span class="keyword">int</span>)(<span class="number">1000</span>*Math.random()));</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                System.out.println(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(who+<span class="string">"正在运行！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p> <img src="http://image-kl.test.upcdn.net/Java/life.png" alt="avatar"></p><h2 id="线程的并发"><a href="#线程的并发" class="headerlink" title="线程的并发"></a>线程的并发</h2><p> 互斥锁：当线程A获得一个对象的互斥锁后，线程B若也想获得该对象的互斥锁，就必须等待线程A完成规定的操作并释放出互斥锁后，才能获得该对象的互斥锁，并执行线程B中的操作。<br> synchronized关键字：首先判断对象或方法的互斥锁是否在，若在就获得互斥锁，然后就可以执行紧随其后的临界代码段或方法体；如果对象或方法的互斥锁不在，就进入等待状态，直到获得互斥锁。</p><p> 1.多线程设计银行取款(线程同步方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mbank</span></span>&#123;            <span class="comment">//银行账户类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sum=<span class="number">2000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=sum;</span><br><span class="line">        temp -=k;               <span class="comment">//变量temp保存每个线程处理的值</span></span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep((<span class="keyword">int</span>)(<span class="number">1000</span>*Math.random()));&#125;</span><br><span class="line">        <span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">        sum=temp;</span><br><span class="line">        System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;      <span class="comment">//用户取款线程类实现Runnable接口</span></span><br><span class="line">    <span class="keyword">static</span> Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">                Mbank.take(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer c1=<span class="keyword">new</span> Customer();</span><br><span class="line">        Thread a=<span class="keyword">new</span> Thread(c1);                <span class="comment">//新建Thread类的对象</span></span><br><span class="line">        Thread b=<span class="keyword">new</span> Thread(c1);</span><br><span class="line">        a.start();                              <span class="comment">//调用Thread的start方法</span></span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.synchronized同步语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Synchronized（对象）&#123;</span><br><span class="line"></span><br><span class="line">临界代码段</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3.synchronized同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tickets t=<span class="keyword">new</span> Tickets(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Producer(t).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tickets</span></span>&#123;                                        <span class="comment">//票类</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> available=<span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tickets</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size=size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span></span>&#123;                   <span class="comment">//存票同步方法</span></span><br><span class="line">        <span class="keyword">if</span>(available)</span><br><span class="line">            <span class="keyword">try</span>&#123;wait();&#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)&#123; &#125;</span><br><span class="line">        System.out.println(<span class="string">"存入第【"</span>+(++number)+<span class="string">"】号票"</span>);</span><br><span class="line">        available=<span class="keyword">true</span>;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;                  <span class="comment">//卖票同步方法</span></span><br><span class="line">        <span class="keyword">if</span>(!available)</span><br><span class="line">            <span class="keyword">try</span>&#123;wait();&#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">        System.out.println(<span class="string">"售出第【"</span>+(number)+<span class="string">"】号票"</span>);</span><br><span class="line">        available=<span class="keyword">false</span>;</span><br><span class="line">        notify();</span><br><span class="line">        <span class="keyword">if</span>(number==size) number=size+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;                <span class="comment">//存票线程类</span></span><br><span class="line">    Tickets t=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Tickets t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(t.number&lt;t.size)</span><br><span class="line">            t.put();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;              <span class="comment">//售票线程类</span></span><br><span class="line">    Tickets t=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Tickets t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(t.number&lt;=t.size)</span><br><span class="line">            t.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><h5 id="阻塞状态的线程一般情况下可由下列的情况所产生"><a href="#阻塞状态的线程一般情况下可由下列的情况所产生" class="headerlink" title="阻塞状态的线程一般情况下可由下列的情况所产生"></a>阻塞状态的线程一般情况下可由下列的情况所产生</h5><ol><li>该线程调用对象的wait()方法；</li><li>该线程本身调用了wait()方法；</li><li>该线程和另一个线程join()在一起； //加入线程必须要在先执行的线程的start()后面调用join()才能先执行</li><li>有优先级更高的线程处于就绪状态。</li></ol><h5 id="解除阻塞的原因有"><a href="#解除阻塞的原因有" class="headerlink" title="解除阻塞的原因有"></a>解除阻塞的原因有</h5><ol><li>如果线程是由调用对象的wait()方法所阻塞，则该对象的notify()方法被调用时可解除阻塞；</li><li>线程进入睡眠(sleep)状态，但指定的睡眠时间到了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;实现线程的两种方式&quot;&gt;&lt;a href=&quot;#实现线程的两种方式&quot; class=&quot;headerlink&quot; title=&quot;实现线程的两种方式&quot;&gt;&lt;/a&gt;实现线程的两种方式&lt;/h2&gt;&lt;p&gt; 1.继承java.lang包中的Thread
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 文件处理-Java.IO</title>
    <link href="http://Jamzy1.github.io/2020/02/08/JAVA-IO/"/>
    <id>http://Jamzy1.github.io/2020/02/08/JAVA-IO/</id>
    <published>2020-02-08T03:33:55.733Z</published>
    <updated>2020-06-22T05:06:08.362Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p> 流是指计算机各部件之间的数据流动。Java只针对流做处理，增强了程序的可移植性。<br> InputStream和OutpuStream通常用来处理“位流”，这种流通常被用来读写诸如图片、音频视频等二进制文件也可读写文本文件，而Reader和Writer类则是用来处理“字符流”，也就是文本文件。</p><ul><li>InputStream(字节输入流类)</li><li>OutputStream(字节输出流类)<br>文件输入输出流(FileInputStream)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fin;</span><br><span class="line">        FileOutputStream fout;      <span class="comment">//声明对象</span></span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//输入字符到指定文件</span></span><br><span class="line">            fin=<span class="keyword">new</span> FileInputStream(FileDescriptor.in);</span><br><span class="line">            fout=<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\blogimage\\text.txt"</span>);  <span class="comment">//创建对象</span></span><br><span class="line">            System.out.println(<span class="string">"请输入一串字符，并以#结束："</span>);</span><br><span class="line">            <span class="keyword">while</span>((ch=(<span class="keyword">char</span>)fin.read())!=<span class="string">'#'</span>)    <span class="comment">//从键盘读数据、每次读入一个二进制数据</span></span><br><span class="line">                fout.write(ch);                 <span class="comment">//将读到的不为 # 的数据写入指定文件</span></span><br><span class="line">            fin.close();</span><br><span class="line">            fout.close();</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将文件中的内容输出到屏幕</span></span><br><span class="line">            fin=<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\blogimage\\text.txt"</span>);</span><br><span class="line">            fout=<span class="keyword">new</span> FileOutputStream(FileDescriptor.out);                <span class="comment">//重新定义两个对象</span></span><br><span class="line">            <span class="keyword">while</span>(fin.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                data=fin.read();                                <span class="comment">//从输出流将字节读到变量data</span></span><br><span class="line">                fout.write(data);                               <span class="comment">//将变量data的全部字节按顺序写入到输出流</span></span><br><span class="line">            &#125;</span><br><span class="line">            fin.close();</span><br><span class="line">            fout.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"文件没找到！"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>管道输入输出流</li><li>过滤输入输出流：在输入输出数据的同时能对所传输的数据做指定类型或格式的转换。</li><li>标准输入输出：</li></ul><ol><li>Reader(字符输入流类)</li><li>Writer(字符输出流类)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h2&gt;&lt;p&gt; 流是指计算机各部件之间的数据流动。Java只针对流做处理，增强了程序的可移植性。&lt;br&gt; InputStre
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 异常处理-Exception</title>
    <link href="http://Jamzy1.github.io/2020/02/07/JAVA-Exception/"/>
    <id>http://Jamzy1.github.io/2020/02/07/JAVA-Exception/</id>
    <published>2020-02-07T04:09:58.409Z</published>
    <updated>2020-06-22T04:26:44.896Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p> 每当JAVA程序运行过程中发生一个可识别的运行错误时，即该错误有一个异常类（最上层Java.lang.Throwable包括两个子类,无法捕捉的Java.lang.Error和Java.lang.Exception）与之对应时，系统都会产生一个相应的给异常类的对象。一旦一个异常对象产生了，系统中就一定有相应的机制来处理它，从而保证整个程序运行的安全性。这就是JAVA异常处理机制。</p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p> 生成异常对象并把它交给运行系统的过程称为抛出异常。在没有任何的处理情况下异常对象会自动的抛给调用端，调用端接收到这个异常对象，由于调用端也没有任何处理，则继续向上抛出给JVM，JVM会打印这个异常对象。<br> 1.在方法体内使用throw语句抛出异常对象<br> 2.在方法头部添加throws子句表示方法将抛出异常<br> 通过这两种方式抛出的异常，在方法中就不必编写try—catch程序段了，因为异常已经被抛到上层，所以交由调用此方法的程序来处理。当然方法体内也可以try-catch处理其他异常。</p><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p> <strong>异常的处理需要先抛出(系统自动抛出和指定方法抛出)，然后再进行捕捉</strong><br> <img src="http://image-kl.test.upcdn.net/Java/try.png" alt="avatar"><br> finally里面适合做方法的资源关闭和首尾工作。方法遇到return形成返回值，后续再修改不会改变返回值;finally是唯一一个可以return一次后还能再return一次的代码块，可以修改方法返回值。<br> RuntimeException可以不编写异常处理的程序代码，仍然可以编译成功，它是在程序运行时才可能发生；而IOException一定要进行捕捉处理才行，它通常用来处理与输入输出有关的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;异常处理机制&quot;&gt;&lt;a href=&quot;#异常处理机制&quot; class=&quot;headerlink&quot; title=&quot;异常处理机制&quot;&gt;&lt;/a&gt;异常处理机制&lt;/h2&gt;&lt;p&gt; 每当JAVA程序运行过程中发生一个可识别的运行错误时，即该错误有一个
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>

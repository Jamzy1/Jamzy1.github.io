<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿正</title>
  
  <subtitle>生而为人，不必抱歉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Jamzy1.github.io/"/>
  <updated>2020-06-22T05:07:21.496Z</updated>
  <id>http://Jamzy1.github.io/</id>
  
  <author>
    <name>史佳正</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单链表逆转</title>
    <link href="http://Jamzy1.github.io/2020/02/26/%E5%8D%95%E9%93%BE%E8%A1%A8%E9%80%86%E8%BD%AC/"/>
    <id>http://Jamzy1.github.io/2020/02/26/单链表逆转/</id>
    <published>2020-02-26T13:48:55.686Z</published>
    <updated>2020-06-22T05:07:21.496Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><p> 将单链表中各结点的next域改为指向其前驱结点，原第一个结点的next域为空，head改为指向原先的最后一个结点。<br> list.head.next表示第一个元素</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyList_reverse</span> </span>&#123;           <span class="comment">//单链表逆转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(SinglyList&lt;T&gt; list)</span></span>&#123;</span><br><span class="line">        Node&lt;T&gt; p=list.head.next,succ=<span class="keyword">null</span>,front=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            succ=p.next;        <span class="comment">//p的下一结点存在succ</span></span><br><span class="line">            p.next=front;       <span class="comment">//将p的下一结点指向front</span></span><br><span class="line">            front=p;            <span class="comment">//front向后走一步</span></span><br><span class="line">            p=succ;             <span class="comment">//p向后走一步</span></span><br><span class="line">        &#125;</span><br><span class="line">        list.head.next=front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String value[] = &#123; <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span> &#125;;</span><br><span class="line">        SinglyList&lt;String&gt; list = <span class="keyword">new</span> SinglyList&lt;String&gt;(value);</span><br><span class="line">        System.out.println(<span class="string">"list: "</span> + list.toString());</span><br><span class="line">        reverse(list);</span><br><span class="line">        System.out.println(<span class="string">"逆转后 "</span> + list.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; 将单链表中各结点的next域改为指向其前驱结点，原第一个结点的next域为空，head改为指向原先的最后一个结点。&lt;br&gt; list.head.next表示第一个元素&lt;/p&gt;
 &lt;figure class=&quot;highlight jav
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>顺序表实现Josephus问题</title>
    <link href="http://Jamzy1.github.io/2020/02/19/Josephus%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
    <id>http://Jamzy1.github.io/2020/02/19/Josephus约瑟夫环/</id>
    <published>2020-02-19T02:19:46.074Z</published>
    <updated>2020-06-22T03:42:55.213Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p> 古代某法官要判决number个犯人的死刑，他有一条荒唐的法律：让囚犯站成一个圆圈，从第start个人开始数起，每数到第distance个犯人，就拉出去处决，然后再次数distance个人，再次进行处决，，，，直到最后只剩一个人，这个人会被赦免，当number = 5，start = 0，distance = 3时，过程如下：</p><p> <img src="http://image-kl.test.upcdn.net/%E7%AE%97%E6%B3%95/Josephus.png" alt="avatar"><br> 代码实现<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Josephus</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Josephus</span><span class="params">(<span class="keyword">int</span> number ,<span class="keyword">int</span> start ,<span class="keyword">int</span> distance)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Josephus("</span>+number+<span class="string">","</span>+start+<span class="string">","</span>+distance+<span class="string">"),"</span>);</span><br><span class="line">       SeqList&lt;String&gt; list=<span class="keyword">new</span> SeqList&lt;String&gt;(number);                   <span class="comment">//创建顺序表并给容量number</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;number ; i++)</span><br><span class="line">           list.insert((<span class="keyword">char</span>)(<span class="string">'A'</span>+i)+<span class="string">""</span>);                                  <span class="comment">//给内容ABC...</span></span><br><span class="line">       System.out.println(list.toString());                                <span class="comment">//打印成字符串</span></span><br><span class="line">       <span class="keyword">int</span> i=start;</span><br><span class="line">       <span class="keyword">while</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">           i=(i+distance-<span class="number">1</span>) % list.size();                                 <span class="comment">//用取余防止数组越界</span></span><br><span class="line">           System.out.println(<span class="string">"删除"</span>+list.remove(i).toString()+<span class="string">","</span>);</span><br><span class="line">           System.out.println(list.toString());</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"被赦免者是"</span>+list.get(<span class="number">0</span>).toString());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> Josephus(<span class="number">26</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt; 古代某法官要判决number个犯人的死刑，他有一条荒唐的法律：让囚犯站成一个圆圈，从
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="http://Jamzy1.github.io/2020/02/16/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://Jamzy1.github.io/2020/02/16/线性表/</id>
    <published>2020-02-16T15:00:03.948Z</published>
    <updated>2020-06-22T02:23:26.220Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="线性表接口"><a href="#线性表接口" class="headerlink" title="线性表接口"></a>线性表接口</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i,T x)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,T x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T x)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(T key)</span></span>;              <span class="comment">//查找首次出现的与key相等元素，返回元素序号i</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertDifferent</span><span class="params">(T x)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">(T key)</span></span>;                <span class="comment">//删除首次出现的与key相等元素，返回被删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List&lt;T&gt; list)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性表的顺序存储和实现（顺序表即数组）"><a href="#线性表的顺序存储和实现（顺序表即数组）" class="headerlink" title="线性表的顺序存储和实现（顺序表即数组）"></a>线性表的顺序存储和实现（顺序表即数组）</h2><p><strong>顺序表</strong>是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。<strong>线性表采用顺序存储的方式存储就称之为顺序表。</strong>顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。<br>从顺序表的定义上可以看出，顺序表就是数组。二者只是不同领域中的称呼。顺序表是数据结构中的专有名词，而数组是在C语言或者其它编程语言中的一种数据类型。可以说，数组是顺序表在实际编程中的具体实现方式。</p><ol><li>创建顺序表类，并实现线性表List几个简单的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Object[] element;<span class="comment">//element.length是顺序表空间大小</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> n;<span class="comment">//this.n是内容的多少</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;                     <span class="comment">//第一个构造方法,定义容量为length</span></span><br><span class="line">        <span class="keyword">this</span>.element=<span class="keyword">new</span> Object[length];</span><br><span class="line">        <span class="keyword">this</span>.n=<span class="number">0</span>;                                   <span class="comment">//还没给内容所以n=0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">()</span></span>&#123;                               <span class="comment">//无参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">64</span>);                           <span class="comment">//调用第一个构造方法并传入length=64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">(T[] values)</span></span>&#123;                     <span class="comment">//构造方法，传入数组</span></span><br><span class="line">        <span class="keyword">this</span>(values.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;values.length ; i++) &#123;</span><br><span class="line">           <span class="keyword">this</span>.element[i]=values[i];</span><br><span class="line">        <span class="keyword">this</span>.n=element.length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;                      <span class="comment">//判空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.n==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;                             <span class="comment">//返回大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;                           <span class="comment">//返回序号i的元素</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;<span class="keyword">this</span>.n)</span><br><span class="line">            <span class="keyword">return</span> (T)<span class="keyword">this</span>.element[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i, T x)</span> </span>&#123;                   <span class="comment">//设置序号i的元素为x</span></span><br><span class="line">        <span class="keyword">if</span>(x==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"x==null"</span>);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;<span class="keyword">this</span>.n)</span><br><span class="line">            <span class="keyword">this</span>.element[i]=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IndexOutOfBoundsException(i+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;                      <span class="comment">//返回线性表描述的所有字符串</span></span><br><span class="line">        String str=<span class="keyword">this</span>.getClass().getName()+<span class="string">"("</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.n&gt;<span class="number">0</span>)</span><br><span class="line">            str+=<span class="keyword">this</span>.element[<span class="number">0</span>].toString();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="keyword">this</span>.n ; i++)</span><br><span class="line">            str+=<span class="string">","</span>+<span class="keyword">this</span>.element[i].toString();</span><br><span class="line">        <span class="keyword">return</span> str+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>插入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, T x)</span> </span>&#123;                     <span class="comment">//插入x在i位置上</span></span><br><span class="line">    <span class="keyword">if</span> (x==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"x==null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">0</span>)</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="keyword">this</span>.n)</span><br><span class="line">        i=<span class="keyword">this</span>.n;</span><br><span class="line">    Object[] source=<span class="keyword">this</span>.element;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.n==element.length)&#123;                    <span class="comment">//若数组满，则扩容</span></span><br><span class="line">        <span class="keyword">this</span>.element=<span class="keyword">new</span> Object[element.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)                        <span class="comment">//扩容后将i前面的元素搬到新数组</span></span><br><span class="line">            <span class="keyword">this</span>.element[j]=source[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="keyword">this</span>.n-<span class="number">1</span>; j &gt;=i; j--)              <span class="comment">//将i后面的数组向后移一位</span></span><br><span class="line">        <span class="keyword">this</span>.element[j+<span class="number">1</span>]=source[j];</span><br><span class="line">    <span class="keyword">this</span>.element[i]=x;</span><br><span class="line">    <span class="keyword">this</span>.n++;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(T x)</span> </span>&#123;                            <span class="comment">//在顺序表最后插入x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.insert(<span class="keyword">this</span>.n,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.n&gt;<span class="number">0</span> &amp;&amp; i&gt;=<span class="number">0</span> &amp;&amp; i&lt;<span class="keyword">this</span>.n)&#123;</span><br><span class="line">        T old=(T) <span class="keyword">this</span>.element[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;<span class="keyword">this</span>.n-<span class="number">1</span> ; j++)          <span class="comment">//将i后面的元素前移</span></span><br><span class="line">            <span class="keyword">this</span>.element[j]=<span class="keyword">this</span>.element[j+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.element[<span class="keyword">this</span>.n-<span class="number">1</span>]=<span class="keyword">null</span>;                <span class="comment">//最后一个数组元素对象设为空</span></span><br><span class="line">        <span class="keyword">this</span>.n--;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;                               <span class="comment">//删除内容但空间还在</span></span><br><span class="line">    <span class="keyword">this</span>.n=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>查找<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="keyword">this</span>.n ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(<span class="keyword">this</span>.element[i]))</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.search(key)!=-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>比较线性表是否相等<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;             <span class="comment">//比较两个顺序表是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>==obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> SeqList&lt;?&gt;) &#123;</span><br><span class="line">        SeqList&lt;T&gt; list=(SeqList&lt;T&gt;)obj;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.n==list.n)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(<span class="keyword">this</span>.get(i).equals(list.get(i))))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性表的链式存储和实现（链表）"><a href="#线性表的链式存储和实现（链表）" class="headerlink" title="线性表的链式存储和实现（链表）"></a>线性表的链式存储和实现（链表）</h2></li></ol>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;线性表接口&quot;&gt;&lt;a href=&quot;#线性表接口&quot; class=&quot;headerlink&quot; title=&quot;线性表接口&quot;&gt;&lt;/a&gt;线性表接口&lt;/h2&gt; &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构-前言</title>
    <link href="http://Jamzy1.github.io/2020/02/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%89%8D%E8%A8%80/"/>
    <id>http://Jamzy1.github.io/2020/02/14/数据结构-前言/</id>
    <published>2020-02-14T15:22:04.186Z</published>
    <updated>2020-06-22T02:22:35.808Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p> <strong>新开了数据结构一栏，原本一年前就学完的知识，今天再次拾起，打算十天内学习完，一天一章。</strong><br> 数据结构分为三种：线性结构、树结构、图。<br> 数据结构概念包含三方面:数据的逻辑结构(线性表、树、图), 数据的储存结构(顺序存储结构和链式存储结构)和对数据的操作。<br> 顺序存储结构(数组)使用一组连续的内存单元依次存放数据，数据元素在内存中的物理存储次序与他们的逻辑次序相同。<br> 链式存储结构：结点(数据域，地址域)，通过地址域将关联结点连接起来。<br> 每种数据结构就是一个实现表示抽象数据类型接口的类，每个类提供接口中方法的不同实现。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p> 算法时间代价：算法的时间复杂度表示算法执行时间的增长率而绝非时间；O(1)&lt;O(n)&lt;O(log)&lt;O(n)&lt;O(n$<em>$log)&lt;O(&amp;n^2&amp;)&lt;O(&amp;n^3&amp;)&lt;O(*2^n</em>)<br> 执行n次的循环语句,时间复杂度为O(n)<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">count++;</span><br></pre></td></tr></table></figure><br> 算法空间代价：算法执行时所占用的存储空间量，由辅助变量占用的存储空间为依据(即声明的临时变量等)</p><h2 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt; &lt;strong&gt;新开了数据结构一栏，原本一年前就学完的知识，今天再次拾起，打算十天内
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Jamzy1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 泛型</title>
    <link href="http://Jamzy1.github.io/2020/02/14/JAVA-%E6%B3%9B%E5%9E%8B/"/>
    <id>http://Jamzy1.github.io/2020/02/14/JAVA-泛型/</id>
    <published>2020-02-14T04:53:06.310Z</published>
    <updated>2020-06-22T04:26:51.885Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>泛型类：泛型也称为参数多态，在使用泛型定义的类创建对象时(泛型实例化)，可以根据不同的需求给出类型参数T的具体类型，必须是引用类型(类类型)。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName&lt;T</span> <span class="keyword">extends</span> <span class="title">anyClass&gt;</span>  <span class="title">限制泛型的可用类型，无论anyClass是类还是接口，都用extends关键字。</span></span></span><br></pre></td></tr></table></figure></li><li>泛型方法：泛型方法与其所在的类是否是泛型类没有关系。泛型方法的返回值和其参数类型应该都是泛型而且类型应该一致。<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; 返回值类型 方法名 (T 参数)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>泛型的类型通配符：一是用于创建可从新赋值但不可修改的其内容的泛型对象；二是用在方法的参数中，限制传入不想要的类型实参。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;泛型类：泛型也称为参数多态，在使用泛型定义的类创建对象时(泛型实例化)，可以根据不同的需求
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 多线程</title>
    <link href="http://Jamzy1.github.io/2020/02/09/JAVA-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://Jamzy1.github.io/2020/02/09/JAVA-多线程/</id>
    <published>2020-02-09T03:01:25.408Z</published>
    <updated>2020-06-22T05:02:07.124Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="实现线程的两种方式"><a href="#实现线程的两种方式" class="headerlink" title="实现线程的两种方式"></a>实现线程的两种方式</h2><p> 1.继承java.lang包中的Thread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String who;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String str)</span></span>&#123;        <span class="comment">//构造方法，用于设置成员变量who</span></span><br><span class="line">        who=str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;                  <span class="comment">//覆盖Thread类里的run()方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                sleep((<span class="keyword">int</span>)(<span class="number">1000</span>*Math.random()));       <span class="comment">//控制线程睡眠时间为0~1秒之间的随机数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">            System.out.println(who+<span class="string">"正在运行！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread you=<span class="keyword">new</span> MyThread(<span class="string">"你"</span>);</span><br><span class="line">        MyThread she=<span class="keyword">new</span> MyThread(<span class="string">"她"</span>);</span><br><span class="line">        </span><br><span class="line">        you.start();</span><br><span class="line">        she.start();            <span class="comment">//同时激活线程</span></span><br><span class="line">        System.out.println(<span class="string">"主方法main()运行结束！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.用Runnable接口来创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread1 you=<span class="keyword">new</span> MyThread1(<span class="string">"你"</span>);</span><br><span class="line">        MyThread1 she=<span class="keyword">new</span> MyThread1(<span class="string">"她"</span>);</span><br><span class="line">        Thread ti=<span class="keyword">new</span> Thread(you);      <span class="comment">//产生Thread类的对象ti</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(she);</span><br><span class="line">        ti.start();</span><br><span class="line">        t2.start();            <span class="comment">//同时激活线程</span></span><br><span class="line">        System.out.println(<span class="string">"主方法main()运行结束！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;        <span class="comment">//由runnable接口实现MyThread类</span></span><br><span class="line">    <span class="keyword">private</span> String who;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        who=str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep((<span class="keyword">int</span>)(<span class="number">1000</span>*Math.random()));</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                System.out.println(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(who+<span class="string">"正在运行！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p> <img src="http://image-kl.test.upcdn.net/Java/life.png" alt="avatar"></p><h2 id="线程的并发"><a href="#线程的并发" class="headerlink" title="线程的并发"></a>线程的并发</h2><p> 互斥锁：当线程A获得一个对象的互斥锁后，线程B若也想获得该对象的互斥锁，就必须等待线程A完成规定的操作并释放出互斥锁后，才能获得该对象的互斥锁，并执行线程B中的操作。<br> synchronized关键字：首先判断对象或方法的互斥锁是否在，若在就获得互斥锁，然后就可以执行紧随其后的临界代码段或方法体；如果对象或方法的互斥锁不在，就进入等待状态，直到获得互斥锁。</p><p> 1.多线程设计银行取款(线程同步方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mbank</span></span>&#123;            <span class="comment">//银行账户类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sum=<span class="number">2000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=sum;</span><br><span class="line">        temp -=k;               <span class="comment">//变量temp保存每个线程处理的值</span></span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep((<span class="keyword">int</span>)(<span class="number">1000</span>*Math.random()));&#125;</span><br><span class="line">        <span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">        sum=temp;</span><br><span class="line">        System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;      <span class="comment">//用户取款线程类实现Runnable接口</span></span><br><span class="line">    <span class="keyword">static</span> Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">                Mbank.take(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer c1=<span class="keyword">new</span> Customer();</span><br><span class="line">        Thread a=<span class="keyword">new</span> Thread(c1);                <span class="comment">//新建Thread类的对象</span></span><br><span class="line">        Thread b=<span class="keyword">new</span> Thread(c1);</span><br><span class="line">        a.start();                              <span class="comment">//调用Thread的start方法</span></span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.synchronized同步语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Synchronized（对象）&#123;</span><br><span class="line"></span><br><span class="line">临界代码段</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3.synchronized同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tickets t=<span class="keyword">new</span> Tickets(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Producer(t).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tickets</span></span>&#123;                                        <span class="comment">//票类</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> available=<span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tickets</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size=size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span></span>&#123;                   <span class="comment">//存票同步方法</span></span><br><span class="line">        <span class="keyword">if</span>(available)</span><br><span class="line">            <span class="keyword">try</span>&#123;wait();&#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)&#123; &#125;</span><br><span class="line">        System.out.println(<span class="string">"存入第【"</span>+(++number)+<span class="string">"】号票"</span>);</span><br><span class="line">        available=<span class="keyword">true</span>;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;                  <span class="comment">//卖票同步方法</span></span><br><span class="line">        <span class="keyword">if</span>(!available)</span><br><span class="line">            <span class="keyword">try</span>&#123;wait();&#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">        System.out.println(<span class="string">"售出第【"</span>+(number)+<span class="string">"】号票"</span>);</span><br><span class="line">        available=<span class="keyword">false</span>;</span><br><span class="line">        notify();</span><br><span class="line">        <span class="keyword">if</span>(number==size) number=size+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;                <span class="comment">//存票线程类</span></span><br><span class="line">    Tickets t=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Tickets t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(t.number&lt;t.size)</span><br><span class="line">            t.put();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;              <span class="comment">//售票线程类</span></span><br><span class="line">    Tickets t=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Tickets t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(t.number&lt;=t.size)</span><br><span class="line">            t.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><h5 id="阻塞状态的线程一般情况下可由下列的情况所产生"><a href="#阻塞状态的线程一般情况下可由下列的情况所产生" class="headerlink" title="阻塞状态的线程一般情况下可由下列的情况所产生"></a>阻塞状态的线程一般情况下可由下列的情况所产生</h5><ol><li>该线程调用对象的wait()方法；</li><li>该线程本身调用了wait()方法；</li><li>该线程和另一个线程join()在一起； //加入线程必须要在先执行的线程的start()后面调用join()才能先执行</li><li>有优先级更高的线程处于就绪状态。</li></ol><h5 id="解除阻塞的原因有"><a href="#解除阻塞的原因有" class="headerlink" title="解除阻塞的原因有"></a>解除阻塞的原因有</h5><ol><li>如果线程是由调用对象的wait()方法所阻塞，则该对象的notify()方法被调用时可解除阻塞；</li><li>线程进入睡眠(sleep)状态，但指定的睡眠时间到了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;实现线程的两种方式&quot;&gt;&lt;a href=&quot;#实现线程的两种方式&quot; class=&quot;headerlink&quot; title=&quot;实现线程的两种方式&quot;&gt;&lt;/a&gt;实现线程的两种方式&lt;/h2&gt;&lt;p&gt; 1.继承java.lang包中的Thread
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 文件处理-Java.IO</title>
    <link href="http://Jamzy1.github.io/2020/02/08/JAVA-IO/"/>
    <id>http://Jamzy1.github.io/2020/02/08/JAVA-IO/</id>
    <published>2020-02-08T03:33:55.733Z</published>
    <updated>2020-06-22T05:06:08.362Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p> 流是指计算机各部件之间的数据流动。Java只针对流做处理，增强了程序的可移植性。<br> InputStream和OutpuStream通常用来处理“位流”，这种流通常被用来读写诸如图片、音频视频等二进制文件也可读写文本文件，而Reader和Writer类则是用来处理“字符流”，也就是文本文件。</p><ul><li>InputStream(字节输入流类)</li><li>OutputStream(字节输出流类)<br>文件输入输出流(FileInputStream)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fin;</span><br><span class="line">        FileOutputStream fout;      <span class="comment">//声明对象</span></span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//输入字符到指定文件</span></span><br><span class="line">            fin=<span class="keyword">new</span> FileInputStream(FileDescriptor.in);</span><br><span class="line">            fout=<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\blogimage\\text.txt"</span>);  <span class="comment">//创建对象</span></span><br><span class="line">            System.out.println(<span class="string">"请输入一串字符，并以#结束："</span>);</span><br><span class="line">            <span class="keyword">while</span>((ch=(<span class="keyword">char</span>)fin.read())!=<span class="string">'#'</span>)    <span class="comment">//从键盘读数据、每次读入一个二进制数据</span></span><br><span class="line">                fout.write(ch);                 <span class="comment">//将读到的不为 # 的数据写入指定文件</span></span><br><span class="line">            fin.close();</span><br><span class="line">            fout.close();</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将文件中的内容输出到屏幕</span></span><br><span class="line">            fin=<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\blogimage\\text.txt"</span>);</span><br><span class="line">            fout=<span class="keyword">new</span> FileOutputStream(FileDescriptor.out);                <span class="comment">//重新定义两个对象</span></span><br><span class="line">            <span class="keyword">while</span>(fin.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                data=fin.read();                                <span class="comment">//从输出流将字节读到变量data</span></span><br><span class="line">                fout.write(data);                               <span class="comment">//将变量data的全部字节按顺序写入到输出流</span></span><br><span class="line">            &#125;</span><br><span class="line">            fin.close();</span><br><span class="line">            fout.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"文件没找到！"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>管道输入输出流</li><li>过滤输入输出流：在输入输出数据的同时能对所传输的数据做指定类型或格式的转换。</li><li>标准输入输出：</li></ul><ol><li>Reader(字符输入流类)</li><li>Writer(字符输出流类)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h2&gt;&lt;p&gt; 流是指计算机各部件之间的数据流动。Java只针对流做处理，增强了程序的可移植性。&lt;br&gt; InputStre
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 异常处理-Exception</title>
    <link href="http://Jamzy1.github.io/2020/02/07/JAVA-Exception/"/>
    <id>http://Jamzy1.github.io/2020/02/07/JAVA-Exception/</id>
    <published>2020-02-07T04:09:58.409Z</published>
    <updated>2020-06-22T04:26:44.896Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p> 每当JAVA程序运行过程中发生一个可识别的运行错误时，即该错误有一个异常类（最上层Java.lang.Throwable包括两个子类,无法捕捉的Java.lang.Error和Java.lang.Exception）与之对应时，系统都会产生一个相应的给异常类的对象。一旦一个异常对象产生了，系统中就一定有相应的机制来处理它，从而保证整个程序运行的安全性。这就是JAVA异常处理机制。</p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p> 生成异常对象并把它交给运行系统的过程称为抛出异常。在没有任何的处理情况下异常对象会自动的抛给调用端，调用端接收到这个异常对象，由于调用端也没有任何处理，则继续向上抛出给JVM，JVM会打印这个异常对象。<br> 1.在方法体内使用throw语句抛出异常对象<br> 2.在方法头部添加throws子句表示方法将抛出异常<br> 通过这两种方式抛出的异常，在方法中就不必编写try—catch程序段了，因为异常已经被抛到上层，所以交由调用此方法的程序来处理。当然方法体内也可以try-catch处理其他异常。</p><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p> <strong>异常的处理需要先抛出(系统自动抛出和指定方法抛出)，然后再进行捕捉</strong><br> <img src="http://image-kl.test.upcdn.net/Java/try.png" alt="avatar"><br> finally里面适合做方法的资源关闭和首尾工作。方法遇到return形成返回值，后续再修改不会改变返回值;finally是唯一一个可以return一次后还能再return一次的代码块，可以修改方法返回值。<br> RuntimeException可以不编写异常处理的程序代码，仍然可以编译成功，它是在程序运行时才可能发生；而IOException一定要进行捕捉处理才行，它通常用来处理与输入输出有关的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;异常处理机制&quot;&gt;&lt;a href=&quot;#异常处理机制&quot; class=&quot;headerlink&quot; title=&quot;异常处理机制&quot;&gt;&lt;/a&gt;异常处理机制&lt;/h2&gt;&lt;p&gt; 每当JAVA程序运行过程中发生一个可识别的运行错误时，即该错误有一个
      
    
    </summary>
    
      <category term="Java" scheme="http://Jamzy1.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
